Given a square matrix, calculate the absolute difference between the sums of its diagonals.

##Input Format

The first line contains a single integer,n , the number of rows and columns in the square matrix arr .
Each of the next n lines describes a row, arr[i], and consists of n space-separated integers arr[i][j]

Output Format

Return the absolute difference between the sums of the matrix's two diagonals as a single integer.

Sample Input

3
11 2 4
4 5 6
10 8 -12
Sample Output

15

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'diagonalDifference' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY arr as parameter.
#

def diagonalDifference(arr):
    # Write your code here
    ls=0
    rs=0
    for i in range(1,len(arr)+1):
        for j in range(1,len(arr)+1):
            if(i==j):
                ls+=arr[i-1][j-1]
    for i in range(1,len(arr)+1):
        for j in range(1,len(arr)+1):
            if(i+j==len(arr)+1):
                rs+=arr[i-1][j-1]
    return(abs(ls-rs))

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
